// flow-typed signature: c93dd3dd98b98a974a7d519a681da7ab
// flow-typed version: <<STUB>>/braintree-web_v^3.5.0
/**
 * This is an autogenerated libdef stub for:
 *
 *   'braintree-web'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare interface Client {
  VERSION: string;
  authorization: string;
  getConfiguration(): Configuration;
  create(
    options: { authorization: string },
    callback: (error: BraintreeError, data: Client) => void
  ): void;

  request(
    options: { method: string, endpoint: string, data: any, timeout?: number },
    callback: () => void
  ): void;
}

interface ClientAnalyticsMetadata {
  sessionId: string;
  sdkVersion: string;
  merchantAppId: string;
}

interface Configuration {
  client: Client;
  gatewayConfiguration: any;
  analyticsMetadata: ClientAnalyticsMetadata;
}

interface CreditCardInfo {
  number: string;
  cvv: string;
  expirationDate: string;
  billingAddress: {
    postalCode?: string,
  };
}

declare type SupportedLocales =
  | 'en_US'
  | 'da_DK'
  | 'de_DE'
  | 'en_AU'
  | 'en_GB'
  | 'en_US'
  | 'es_ES'
  | 'fr_CA'
  | 'fr_FR'
  | 'id_ID'
  | 'it_IT'
  | 'ja_JP'
  | 'ko_KR'
  | 'nl_NL'
  | 'no_NO'
  | 'pl_PL'
  | 'pt_BR'
  | 'pt_PT'
  | 'ru_RU'
  | 'sv_SE'
  | 'th_TH'
  | 'zh_CN'
  | 'zh_HK'
  | 'and zh_TW';

declare type Address = {
  line1: string,
  line2?: string,
  city: string,
  state: string,
  postalCode: string,
  countryCode: string,
  phone?: string,
  recipientName?: string,
};
declare type ShippingAddress = Address & { recipientName?: string };

declare type BraintreeError = {
  code: string,
  message: string,
  type: 'CUSTOMER' | 'MERCHANT' | 'NETWORK' | 'INTERNAL' | 'UNKNOWN',
  details: any,
};

declare type PayPalAccountDetails = {
  email: string,
  payerId: string,
  firstName: string,
  lastName: string,
  countryCode: ?string,
  phone: ?string,
  billingAddress: Address,
  shippingAddress: ShippingAddress,
};

declare type PayPalTokenizePayload = {
  nonce: string,
  type: 'PayPalAccount',
  details: PayPalAccountDetails,
  creditFinancingOffered: any,
};

declare module 'braintree-web' {
  declare module.exports: any;
}

declare module 'braintree-web/client' {
  declare module.exports: Client;
}

declare type PaypalPaymentOptions = {
  offerCredit?: boolean,
  displayName?: string,
  locale?: SupportedLocales,
  enableShippingAddress?: boolean,
  shippingAddressOverride?: ShippingAddress,
  shippingAddressEditable?: boolean,
  landingPageType: 'login' | 'billing',
};

declare type VaultFlowOptions = PaypalPaymentOptions & {
  flow: 'vault',
  intent?: 'authorize' | 'sale',
  billingAgreementDescription?: string,
  amount?: number | string,
};

declare type CheckoutFlowOptions = PaypalPaymentOptions & {
  flow: 'checkout',
  intent?: 'authorize' | 'order' | 'sale',
  amount: number | string,
  currency: string,
};

declare type PayPalOptions = VaultFlowOptions | CheckoutFlowOptions;

declare type ClientOptions = { authorization: string };

declare type CreateCallback<T> = (error: BraintreeError, data: T) => void;

declare interface PayPalCheckout {
  createPayment(
    options: VaultFlowOptions,
    callback: (error: BraintreeError, billingToken: string) => void
  ): void;
  createPayment(
    options: CheckoutFlowOptions,
    callback: (error: BraintreeError, paymentId: string) => void
  ): void;
  createPayment(options: PayPalOptions): Promise<string>;

  teardown(): Promise<void>;
  teardown(error: BraintreeError, callback: () => void): void;
}

declare interface PayPalTokenizeReturn {
  close(): void;
  focus(): void;
}

declare interface PayPal {
  teardown: (callback?: (error: BraintreeError) => void) => void;
  closeWindow(): void;
  focusWindow(): void;

  tokenize(
    options: PayPalOptions,
    callback: (error: ?BraintreeError, payload: PayPalTokenizePayload) => void
  ): PayPalTokenizeReturn;
}

declare module 'braintree-web/paypal' {
  declare function create(
    options: { client: Client },
    callback: (error: ?BraintreeError, data: PayPal) => void
  ): void;
}

declare module 'braintree-web/paypal-checkout' {
  declare function create(
    options: { client: Client },
    callback: (error: BraintreeError, instance: PayPalCheckout) => void
  ): void;
  declare function create(options: ClientOptions): Promise<PayPalCheckout>;
}

declare module 'braintree-web/hosted-fields' {
  declare type HostedFieldsTokenizePayload = {
    nonce: string,
    details: {
      cardType: string,
      lastTwo: string,
    },
    description: string,
    type: 'CreditCard',
  };

  declare type HostedFieldsInstance = {
    tokenize: (
      options: { vault?: boolean },
      callback: (
        error: BraintreeError,
        data: HostedFieldsTokenizePayload
      ) => void
    ) => void,
    teardown: (callback?: () => void) => void,
    on: (eventType: string, callback: (event: any) => void) => void,
  };

  declare function create(
    options: {
      client: Client,
      fields: Object,
      styles: Object,
    },
    callback: (error: BraintreeError, data: HostedFieldsInstance) => void
  ): void;
}

declare module 'braintree-web/client' {
  declare module.exports: any;
}
